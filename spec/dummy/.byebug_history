exit
reflection
reflection.source_reflection

reflection.source_reflection.reflect_on_association(association)
reflection.through_reflection
reflection.source_reflection
reflection
continue
self
continue
self.accounts
self.account
self
caller.each { |e| p e}
exit
continue
caller
caller.each { |e| p e}
Hash.new { |h, k| h[k] = Type.new(k) unless k.blank? }
LOOKUP           = Hash.new { |h, k| h[k] = Type.new(k) unless k.blank? }
method("#{association}=").source_location
method("#{association}=").source_loczation
method("#{association}=").source_locztion
method("#{association}=")
caller.source_location
caller.methods
caller.method
source_location
Hash.new { |h, k| h[k] = Type.new(k) unless k.blank? }
var local
caller
callee
models
continue
models
continue
models
continue
has_and_belongs_to_many association
continue
has_and_belongs_to_many association
continue
has_and_belongs_to_many association
has_and_belongs_to_many assosiaction
continue
reflect_on_association(association).join_
reflect_on_association(association)
accounts
has_and_belongs_to_many
options
belongs_to
continue
belongs_to
continue
self.account_ids = models
self.accounts_ids = models
self.accounts = models
self.accounts=
self.accounts=models
self.accounts=model
self.accounts
self
super(models)
reflection
super
continue
superclass
self.accounts
self
var local
var instance
var args
var
model
super().methods
super().class
super.class
models
model
continue
var instance
var local
var
continue
exit
var instance
var local
predicate_builder.join_table
predicate_builder
get_join_keys
reflections
add_reflection
parent_reflection
klass.join_table
klass.class
klass
klass.methods
klass.method
klass
self.table
reflections
reflect_on_association(association)
reflection
reflect_on_all_associations
self
class
reflect_on_all_associations.first.join_table
reflect_on_all_associations.first.
reflect_on_all_associations
derive_join_table
self.join_table
ActsAsTenant.current_tenant
reflect_on_all_associations
options
self.table_name
exit
reflection
where("EXISTS (SELECT 1 FROM #{reflection.join_table} WHERE #{reflection.join_table}.#{reflection.foreign_key} = #{self.table_name}.id AND #{reflection.join_table}.#{reflection.association_foreign_key} = ?)", ActsAsTenant.current_tenant.id)
              where("EXISTS (SELECT 1 FROM #{reflection.join_table} WHERE #{reflection.join_table}.#{reflection.foreign_key} = #{self.table_name}.id AND #{reflection.join_table}.#{reflection.association_foreign_key} = ?)", ActsAsTenant.current_tenant.id)
where("EXISTS (SELECT 1 FROM #{reflection.join_table} WHERE #{reflection.join_table}.#{reflection.foreign_key} = #{self.table_name}.id AND
continue
reflection.association_foreign_key
continue
reflection.association_foreign_key
reflection.foreign_key
reflection.join_table
reflection
continue
reflection = reflect_on_association(options[:through])
reflect_on_association(:project).macro
continue
exit
reflect_on_association(:project).source_reflection
reflect_on_association(:project).source_reflection(options)
reflect_on_association(:project)
reflect_on_association(:project).source_reflection
reflect_on_association(:project).source_reflection(:x)
reflect_on_association(:project).source_reflection
reflect_on_association(:project).through_reflection
options
reflect_on_association(options[:source])
reflect_on_association(options[:source]).through_reflection
reflect_on_association(:project).through_reflection
reflect_on_association(:project).source_reflection
reflect_on_association(:project)
reflect_on_all_association(:project)
reflect_on_all_associations
continue
reflect_on_association(:tasks)
reflections
reflect_on_association(:x)
reflect_on_association(:projects)
reflect_on_association(:project)
reflect_on_association(:accounts)
reflect_on_association(:account)
reflect_on_association
reflect_on_association(association)
